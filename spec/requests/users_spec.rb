require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/users', type: :request do
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    skip('Add a hash of attributes valid for your model')
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  describe 'GET /index' do
    before do
      @user = FactoryBot.create(:user)
      get users_path
    end

    it "リクエストが成功すること" do
      expect(response.status).to eq 200    
    end

    it "ユーザー名とメールアドレスが表示されていること" do
      expect(response.body).to include "hoge"
      expect(response.body).to include "hoge@example.com"
    end
  end
  
  describe 'GET #show' do
    context 'ユーザーが存在する場合' do
      before do
      @user = FactoryBot.create :user
      get user_path @user.id
      end

      it 'リクエストが成功すること' do
        expect(response.status).to eq 200
      end

      it 'ユーザー名とメールアドレスが表示されていること' do
        expect(response.body).to include 'hoge'
        expect(response.body).to include "hoge@example.com"
      end
    end

    context 'ユーザーが存在しない場合' do
      subject { -> { get user_url 1 } }
      it { is_expected.to raise_error ActiveRecord::RecordNotFound }
    end
  end

  describe 'GET /new' do
    before do
      get new_user_path
    end

    it "リクエストが成功すること" do
      expect(response.status).to eq 200
    end
  end

  describe 'GET /edit' do
    before do
      @user = FactoryBot.create :user
      get edit_user_path @user.id
    end

    it 'リクエストが成功すること' do
      expect(response.status).to eq 200
    end

    it 'ユーザー名とメールアドレスが表示されていること' do
      expect(response.body).to include 'hoge'
      expect(response.body).to include "hoge@example.com"
    end
  end

  describe 'POST /create' do
    context 'パラメータが妥当な場合' do
      it 'リクエストが成功すること' do
        post users_path, params: { user: FactoryBot.attributes_for(:user) }
        expect(response.status).to eq 302
      end

      it 'ユーザーが登録されること' do
        expect do
          post users_path, params: { user: FactoryBot.attributes_for(:user) }
        end.to change(User, :count).by(1)
      end

      it 'リダイレクトすること' do
        post users_path, params: { user: FactoryBot.attributes_for(:user) }
        expect(response).to redirect_to User.last
      end
    end
    #パラメータが不正な場合
    #リクエストが成功すること
    #ユーザーが登録されないこと
    #エラーが表示されこと
  end
      
  describe 'PATCH /update' do
    #パラメータが妥当な場合
      #リクエストが成功すること
      #ユーザー名が更新されること
      #リダイレクトすること
    
    #パラメータが不正な場合
      #リクエストが成功すること
      #ユーザーが登録されないこと
      #エラーが表示されこと
  end
    
  describe 'DELETE /destroy' do
    before do
      @user = FactoryBot.create :user
    end

    it 'リクエストが成功すること' do
      delete user_path @user
      expect(response.status).to eq 302
    end

    it 'ユーザーが削除されること' do
      expect do
        delete user_path @user
      end.to change(User, :count).by(-1)
    end

    it 'ユーザー一覧にリダイレクトすること' do
      delete user_path @user
      expect(response).to redirect_to(users_path)
    end
  end
end
